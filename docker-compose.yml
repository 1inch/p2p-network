version: '3.8'

services:
  blockchain:
    container_name: blockchain
    image: ghcr.io/foundry-rs/foundry:v0.3.0
    entrypoint: "anvil --host 0.0.0.0"
    ports:
      - "8545:8545"
    healthcheck:
      test: cast chain-id
      interval: 5s

  deploy-contract:
    image: ghcr.io/foundry-rs/foundry:v0.3.0
    entrypoint: "forge create --broadcast --private-key ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 --rpc-url http://blockchain:8545 /contracts/NodeRegistry.sol:NodeRegistry"
    volumes:
      - "./contracts:/contracts"
    depends_on:
      blockchain:
        condition: service_healthy
  
  relayer:
    container_name: relayer
    build:
      context: .
      target: relayer
      dockerfile: ./relayer/Dockerfile
    volumes:
      - "./assets/relayer.config.yaml:/app/config.yaml"
    entrypoint: ["./relayer", "run"]
    command: ["--config", "config.yaml"]
    depends_on:
      deploy-contract:
        condition: service_completed_successfully
    ports:
      - "8080:8080"

  register-resolver:
    build:
      context: .
      target: resolver
      dockerfile: ./resolver/Dockerfile
    entrypoint: ["./app/resolver", "register"]
    command: ["--configFile", "config.yaml"]
    volumes:
      - "./assets/resolver.config.yaml:/app/config.yaml"
    depends_on:
      deploy-contract:
        condition: service_completed_successfully

  resolver:
    container_name: resolver
    build:
      context: .
      target: resolver
      dockerfile: ./resolver/Dockerfile
    entrypoint: ["./resolver", "run"]
    command: ["--configFile", "config.yaml"]
    volumes:
      - "./assets/resolver.config.yaml:/app/config.yaml"
    depends_on:
      register-resolver:
        condition: service_completed_successfully
    ports:
      - "8001:8001"

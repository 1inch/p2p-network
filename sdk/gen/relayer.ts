/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: relayer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./resolver";
import * as pb_1 from "google-protobuf";
export namespace relayer {
    export enum ErrorCode {
        ERR_INVALID_MESSAGE_FORMAT = 0,
        ERR_RESOLVER_LOOKUP_FAILED = 1,
        ERR_GRPC_EXECUTION_FAILED = 2,
        ERR_RESPONSE_SERIALIZATION_FAILED = 3,
        ERR_DATA_CHANNEL_SEND_FAILED = 4
    }
    export class Error extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: ErrorCode;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrorCode.ERR_INVALID_MESSAGE_FORMAT) as ErrorCode;
        }
        set code(value: ErrorCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: ErrorCode;
            message?: string;
        }): Error {
            const message = new Error({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: ErrorCode;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != ErrorCode.ERR_INVALID_MESSAGE_FORMAT)
                writer.writeEnum(1, this.code);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Error {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Error();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Error {
            return Error.deserialize(bytes);
        }
    }
    export class IncomingMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            publicKeys?: Uint8Array[];
            request?: dependency_1.resolver.ResolverRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("publicKeys" in data && data.publicKeys != undefined) {
                    this.publicKeys = data.publicKeys;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
            }
        }
        get publicKeys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set publicKeys(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get request() {
            return pb_1.Message.getWrapperField(this, dependency_1.resolver.ResolverRequest, 2) as dependency_1.resolver.ResolverRequest;
        }
        set request(value: dependency_1.resolver.ResolverRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            publicKeys?: Uint8Array[];
            request?: ReturnType<typeof dependency_1.resolver.ResolverRequest.prototype.toObject>;
        }): IncomingMessage {
            const message = new IncomingMessage({});
            if (data.publicKeys != null) {
                message.publicKeys = data.publicKeys;
            }
            if (data.request != null) {
                message.request = dependency_1.resolver.ResolverRequest.fromObject(data.request);
            }
            return message;
        }
        toObject() {
            const data: {
                publicKeys?: Uint8Array[];
                request?: ReturnType<typeof dependency_1.resolver.ResolverRequest.prototype.toObject>;
            } = {};
            if (this.publicKeys != null) {
                data.publicKeys = this.publicKeys;
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.publicKeys.length)
                writer.writeRepeatedBytes(1, this.publicKeys);
            if (this.has_request)
                writer.writeMessage(2, this.request, () => this.request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IncomingMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IncomingMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.request, () => message.request = dependency_1.resolver.ResolverRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IncomingMessage {
            return IncomingMessage.deserialize(bytes);
        }
    }
    export class OutgoingMessage extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            publicKey?: Uint8Array;
        } & (({
            response?: dependency_1.resolver.ResolverResponse;
            error?: never;
        } | {
            response?: never;
            error?: Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("publicKey" in data && data.publicKey != undefined) {
                    this.publicKey = data.publicKey;
                }
            }
        }
        get response() {
            return pb_1.Message.getWrapperField(this, dependency_1.resolver.ResolverResponse, 1) as dependency_1.resolver.ResolverResponse;
        }
        set response(value: dependency_1.resolver.ResolverResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_response() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, Error, 2) as Error;
        }
        set error(value: Error) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get publicKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set publicKey(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get result() {
            const cases: {
                [index: number]: "none" | "response" | "error";
            } = {
                0: "none",
                1: "response",
                2: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            response?: ReturnType<typeof dependency_1.resolver.ResolverResponse.prototype.toObject>;
            error?: ReturnType<typeof Error.prototype.toObject>;
            publicKey?: Uint8Array;
        }): OutgoingMessage {
            const message = new OutgoingMessage({});
            if (data.response != null) {
                message.response = dependency_1.resolver.ResolverResponse.fromObject(data.response);
            }
            if (data.error != null) {
                message.error = Error.fromObject(data.error);
            }
            if (data.publicKey != null) {
                message.publicKey = data.publicKey;
            }
            return message;
        }
        toObject() {
            const data: {
                response?: ReturnType<typeof dependency_1.resolver.ResolverResponse.prototype.toObject>;
                error?: ReturnType<typeof Error.prototype.toObject>;
                publicKey?: Uint8Array;
            } = {};
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            if (this.publicKey != null) {
                data.publicKey = this.publicKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_response)
                writer.writeMessage(1, this.response, () => this.response.serialize(writer));
            if (this.has_error)
                writer.writeMessage(2, this.error, () => this.error.serialize(writer));
            if (this.publicKey.length)
                writer.writeBytes(3, this.publicKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OutgoingMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OutgoingMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.response, () => message.response = dependency_1.resolver.ResolverResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.error, () => message.error = Error.deserialize(reader));
                        break;
                    case 3:
                        message.publicKey = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OutgoingMessage {
            return OutgoingMessage.deserialize(bytes);
        }
    }
}

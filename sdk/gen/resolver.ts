/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: resolver.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace resolver {
    export enum ErrorCode {
        ERR_INTERNAL_EXCEPTION = 0,
        ERR_INVALID_MESSAGE_FORMAT = 1,
        ERR_RESPONSE_SERIALIZATION_FAILED = 2
    }
    export class Error extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: ErrorCode;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrorCode.ERR_INTERNAL_EXCEPTION) as ErrorCode;
        }
        set code(value: ErrorCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: ErrorCode;
            message?: string;
        }): Error {
            const message = new Error({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: ErrorCode;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != ErrorCode.ERR_INTERNAL_EXCEPTION)
                writer.writeEnum(1, this.code);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Error {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Error();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Error {
            return Error.deserialize(bytes);
        }
    }
    export class ResolverRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            encrypted?: boolean;
            payload?: Uint8Array;
            publicKey?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("encrypted" in data && data.encrypted != undefined) {
                    this.encrypted = data.encrypted;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("publicKey" in data && data.publicKey != undefined) {
                    this.publicKey = data.publicKey;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encrypted() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set encrypted(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set payload(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get publicKey() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set publicKey(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            encrypted?: boolean;
            payload?: Uint8Array;
            publicKey?: Uint8Array;
        }): ResolverRequest {
            const message = new ResolverRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.encrypted != null) {
                message.encrypted = data.encrypted;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.publicKey != null) {
                message.publicKey = data.publicKey;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                encrypted?: boolean;
                payload?: Uint8Array;
                publicKey?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.encrypted != null) {
                data.encrypted = this.encrypted;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.publicKey != null) {
                data.publicKey = this.publicKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.encrypted != false)
                writer.writeBool(2, this.encrypted);
            if (this.payload.length)
                writer.writeBytes(3, this.payload);
            if (this.publicKey.length)
                writer.writeBytes(4, this.publicKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolverRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolverRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.encrypted = reader.readBool();
                        break;
                    case 3:
                        message.payload = reader.readBytes();
                        break;
                    case 4:
                        message.publicKey = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolverRequest {
            return ResolverRequest.deserialize(bytes);
        }
    }
    export class ResolverResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            id?: string;
            encrypted?: boolean;
        } & (({
            payload?: Uint8Array;
            error?: never;
        } | {
            payload?: never;
            error?: Error;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("encrypted" in data && data.encrypted != undefined) {
                    this.encrypted = data.encrypted;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get encrypted() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set encrypted(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set payload(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, Error, 4) as Error;
        }
        set error(value: Error) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "payload" | "error";
            } = {
                0: "none",
                3: "payload",
                4: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            id?: string;
            encrypted?: boolean;
            payload?: Uint8Array;
            error?: ReturnType<typeof Error.prototype.toObject>;
        }): ResolverResponse {
            const message = new ResolverResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.encrypted != null) {
                message.encrypted = data.encrypted;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.error != null) {
                message.error = Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                encrypted?: boolean;
                payload?: Uint8Array;
                error?: ReturnType<typeof Error.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.encrypted != null) {
                data.encrypted = this.encrypted;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.encrypted != false)
                writer.writeBool(2, this.encrypted);
            if (this.has_payload)
                writer.writeBytes(3, this.payload);
            if (this.has_error)
                writer.writeMessage(4, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResolverResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResolverResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.encrypted = reader.readBool();
                        break;
                    case 3:
                        message.payload = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.error, () => message.error = Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResolverResponse {
            return ResolverResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedExecuteService {
        static definition = {
            Execute: {
                path: "/resolver.Execute/Execute",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResolverRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResolverRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResolverResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResolverResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Execute(call: grpc_1.ServerUnaryCall<ResolverRequest, ResolverResponse>, callback: grpc_1.sendUnaryData<ResolverResponse>): void;
    }
    export class ExecuteClient extends grpc_1.makeGenericClientConstructor(UnimplementedExecuteService.definition, "Execute", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Execute: GrpcUnaryServiceInterface<ResolverRequest, ResolverResponse> = (message: ResolverRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResolverResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResolverResponse>, callback?: grpc_1.requestCallback<ResolverResponse>): grpc_1.ClientUnaryCall => {
            return super.Execute(message, metadata, options, callback);
        };
    }
}
